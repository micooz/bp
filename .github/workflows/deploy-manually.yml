name: Deploy (Manually)

on:
  workflow_dispatch:
    inputs:
      host:
        description: 'Remote Host to deploy'
        required: true
      host:
        description: 'SSH Port'
        default: '22'
        required: true
      username:
        description: 'SSH username'
        required: true
      password:
        description: 'SSH password'
        required: true
      version:
        description: 'Asset version to deploy'
        default: 'v1.0.0-alpha.2'
        required: true
      arch:
        description: 'Asset binary architecture (Rust format)'
        default: 'x86_64-unknown-linux-gnu'
        required: true
      config:
        description: 'Config string used by bp --config'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      HOST: ${{ github.event.inputs.host }}
      PORT: ${{ github.event.inputs.port }}
      USERNAME: ${{ github.event.inputs.username }}
      PASSWORD: ${{ github.event.inputs.password }}
      VERSION: ${{ github.event.inputs.version }}
      ASSET_FILE: bp-${{ github.event.inputs.version }}.${{ github.event.inputs.arch }}.tar.xz
      CONFIG_FILE: config
      DEPLOY_PATH: /root/.bp/deploy/${{ github.event.inputs.version }}
    steps:
      - name: Download Asset
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          version: "tags/${{ env.VERSION }}"
          file: "${{ env.ASSET_FILE }}"
          target: "${{ env.ASSET_FILE }}"

      - name: Write Config File
        run: |
          echo -e "${{ github.event.inputs.config }}" > ${{ env.CONFIG_FILE }}

      - name: Send Asset to Remote Host
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.HOST }}
          port: ${{ env.PORT }}
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}
          source: "${{ env.ASSET_FILE }},${{ env.CONFIG_FILE }}"
          target: "${{ env.DEPLOY_PATH }}"

      - name: Run Deploy Scripts
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.HOST }}
          port: ${{ env.PORT }}
          username: ${{ env.USERNAME }}
          password: ${{ env.PASSWORD }}
          script_stop: true
          script: |
            TAR_FILE=${{ env.DEPLOY_PATH }}/${{ env.ASSET_FILE }}
            BIN_FILE=${{ env.DEPLOY_PATH }}/bp
            CONFIG_FILE=${{ env.DEPLOY_PATH }}/${{ env.CONFIG_FILE }}

            echo "> Extract $TAR_FILE"
            tar -xf $TAR_FILE -C ${{ env.DEPLOY_PATH }}

            echo "Stop bp process"
            killall bp || true

            echo "Start bp service"
            $BIN_FILE --config $CONFIG_FILE

            echo "> All Done."
