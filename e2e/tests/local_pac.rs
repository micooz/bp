use bp_core::{Address, ClientOptions, Options, StartupInfo};
use cmd_lib::run_fun;
use e2e::run_bp::run_bp;

#[tokio::test(flavor = "multi_thread")]
async fn test_pac() {
    let pac_bind: Address = "127.0.0.1:8000".parse().unwrap();

    let opts = Options::Client(ClientOptions {
        pac_bind: Some(pac_bind.clone()),
        proxy_white_list: Some("tests/fixtures/proxy_white_list.txt".to_string()),
        ..Default::default()
    });

    let StartupInfo { bind_addr, .. } = run_bp(opts, None).await;

    let pac_bind = pac_bind.to_string();

    let response = format!(
        r#"// This file is automatically generated.

function FindProxyForURL(url, host) {{
  if (shExpMatch(host, "example.com")) return "DIRECT";
  if (shExpMatch(host, "*baidu.com*")) return "PROXY {}";
  // skip baidu.com
  if (shExpMatch(host, "cn.bing.com")) return "PROXY {}";

  return "DIRECT";
}}"#,
        bind_addr, bind_addr
    );

    assert_eq!(run_fun!(curl $pac_bind/proxy.pac).unwrap(), response);
    assert_eq!(run_fun!(curl $pac_bind/proxy.pac?xxx).unwrap(), response);
}
